<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>お店検索</title>
  <style>
    /* グローバルスタイル */
    body {
      margin: 0;
      font-family: 'Helvetica Neue', sans-serif;
      background: linear-gradient(135deg, #f0f4f8, #d9e2ec);
      color: #333;
      padding: 20px;
    }
    header {
      background: linear-gradient(135deg, #4b79a1, #283e51);
      padding: 20px;
      text-align: center;
      color: #fff;
      font-size: 2rem;
      font-weight: bold;
      border-radius: 5px;
      margin-bottom: 20px;
    }
    .controls {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-bottom: 20px;
    }
    .controls input[type="text"],
    .controls select {
      padding: 10px 15px;
      font-size: 1.1rem;
      border: 1px solid #ccc;
      border-radius: 5px;
      flex: 1;
    }
    .controls button {
      padding: 10px 20px;
      font-size: 1.1rem;
      border: none;
      background: #4b79a1;
      color: #fff;
      cursor: pointer;
      border-radius: 5px;
      transition: background 0.3s;
    }
    .controls button:hover {
      background: #283e51;
    }
    .results {
      background: #fff;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      overflow: hidden;
      margin-bottom: 30px;
    }
    .result-item {
      padding: 15px;
      border-bottom: 1px solid #eee;
      display: flex;
      flex-direction: column;
      transition: background 0.3s;
    }
    .result-item:last-child {
      border-bottom: none;
    }
    .result-item:hover {
      background: #f9f9f9;
    }
    .store-name {
      font-size: 1.4rem;
      font-weight: bold;
      margin-bottom: 5px;
    }
    .store-address {
      font-size: 1.1rem;
      color: #555;
      margin-bottom: 10px;
    }
    .result-actions button {
      align-self: flex-start;
      padding: 8px 15px;
      background: #4b79a1;
      border: none;
      color: #fff;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s;
    }
    .result-actions button:hover {
      background: #283e51;
    }
    .reviews {
      background: #fff;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      text-align: center;
      font-size: 1.2rem;
      color: #888;
    }
  </style>
</head>
<body>
  <header>お店検索</header>
  <div class="controls">
    <input type="text" id="keyword" placeholder="お店の名前や住所のキーワード">
    <select id="filter-type">
      <option value="">すべての店舗</option>
      <option value="convenience">コンビニ</option>
      <option value="cafe">カフェ</option>
      <option value="restaurant">レストラン</option>
    </select>
    <select id="sort">
      <option value="name">名前順</option>
      <option value="distance">距離順</option>
    </select>
    <button id="search-btn">検索</button>
  </div>
  <div class="results" id="results">
    <!-- ここに店舗検索結果が表示されます -->
  </div>
  <div class="reviews">
    ユーザーレビュー：メンテナンス中
  </div>

  <script>
    // --- グローバル変数 ---
    let userPosition = null; // {lat, lon}
    let stores = [];         // Overpass APIから取得した店舗情報

    // --- 距離計算（Haversineの公式） ---
    function calcDistance(lat1, lon1, lat2, lon2) {
      const R = 6371e3; // 地球の半径(m)
      const rad = Math.PI / 180;
      const dLat = (lat2 - lat1) * rad;
      const dLon = (lon2 - lon1) * rad;
      const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(lat1 * rad) * Math.cos(lat2 * rad) *
                Math.sin(dLon/2) * Math.sin(dLon/2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
      return R * c; // 距離 (m)
    }

    // --- Overpass API を用いた店舗情報取得 ---
    function fetchStores(lat, lon) {
      // 半径1km以内の店舗を取得
      const query = `
        [out:json];
        (
          node["shop"](around:1000,${lat},${lon});
        );
        out body;
      `;
      const url = "https://overpass-api.de/api/interpreter?data=" + encodeURIComponent(query);
      fetch(url)
        .then(response => response.json())
        .then(data => {
          stores = data.elements.filter(el => el.tags && (el.tags.name));
          // 初回はソートを名前順に
          sortAndDisplay("name");
        })
        .catch(err => {
          console.error("Overpass APIエラー:", err);
        });
    }

    // --- 検索結果表示 ---
    function displayResults(filteredStores) {
      const resultsDiv = document.getElementById('results');
      resultsDiv.innerHTML = "";
      if (filteredStores.length === 0) {
        resultsDiv.innerHTML = '<p style="padding: 15px;">該当するお店が見つかりませんでした。</p>';
        return;
      }
      filteredStores.forEach(store => {
        const name = store.tags.name || "名称不明";
        let address = "";
        if (store.tags["addr:street"]) {
          address += store.tags["addr:street"];
          if (store.tags["addr:housenumber"]) {
            address += " " + store.tags["addr:housenumber"];
          }
        }
        if (store.tags["addr:city"]) {
          address += " " + store.tags["addr:city"];
        }
        // 距離計算
        let distanceStr = "";
        if (userPosition) {
          const d = calcDistance(userPosition.lat, userPosition.lon, store.lat, store.lon);
          distanceStr = `【${Math.round(d)}m】`;
        }

        const item = document.createElement('div');
        item.className = "result-item";
        item.innerHTML = `
          <div class="store-name">${name} ${distanceStr}</div>
          <div class="store-address">${address}</div>
          <div class="result-actions">
            <button data-lat="${store.lat}" data-lon="${store.lon}">Mapで表示</button>
          </div>
        `;
        resultsDiv.appendChild(item);
      });
      // ボタンにイベントを設定
      Array.from(document.querySelectorAll(".result-actions button")).forEach(btn => {
        btn.addEventListener("click", function() {
          const lat = this.getAttribute("data-lat");
          const lon = this.getAttribute("data-lon");
          // 既存のindex.htmlに座標データを送信（クエリパラメータで渡す例）
          window.location.href = "index.html?lat=" + lat + "&lon=" + lon;
        });
      });
    }

    // --- キーワードフィルター ---
    function filterStores() {
      const keyword = document.getElementById("keyword").value.trim().toLowerCase();
      const filterType = document.getElementById("filter-type").value;
      let filtered = stores.filter(store => {
        const name = store.tags.name ? store.tags.name.toLowerCase() : "";
        let address = "";
        if (store.tags["addr:street"]) address += store.tags["addr:street"].toLowerCase();
        if (store.tags["addr:city"]) address += " " + store.tags["addr:city"].toLowerCase();
        let match = (name.includes(keyword) || address.includes(keyword));
        // ショップ種別のフィルター（例：tagに特定の値があればフィルター）
        if (filterType) {
          // シンプルに店舗名にフィルター文字列が含まれるかで判定（実際はタグのshopの値を使うのが望ましい）
          match = match && name.includes(filterType);
        }
        return match;
      });
      // ソート条件を考慮
      const sortBy = document.getElementById("sort").value;
      sortAndDisplay(sortBy, filtered);
    }

    // --- ソート＆表示 ---
    function sortAndDisplay(sortBy, list) {
      let arr = list || stores.slice();
      if (sortBy === "distance" && userPosition) {
        arr.sort((a, b) => {
          const da = calcDistance(userPosition.lat, userPosition.lon, a.lat, a.lon);
          const db = calcDistance(userPosition.lat, userPosition.lon, b.lat, b.lon);
          return da - db;
        });
      } else {
        // 名前順ソート
        arr.sort((a, b) => {
          const nameA = a.tags.name || "";
          const nameB = b.tags.name || "";
          return nameA.localeCompare(nameB);
        });
      }
      displayResults(arr);
    }

    // --- イベント設定 ---
    document.getElementById("search-btn").addEventListener("click", filterStores);
    document.getElementById("keyword").addEventListener("keyup", function(e) {
      if (e.key === "Enter") filterStores();
    });
    document.getElementById("sort").addEventListener("change", filterStores);
    document.getElementById("filter-type").addEventListener("change", filterStores);

    // --- 現在地取得＆Overpass API呼び出し ---
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        position => {
          userPosition = {
            lat: position.coords.latitude,
            lon: position.coords.longitude
          };
          // 初回取得後、店舗情報を取得
          fetchStores(userPosition.lat, userPosition.lon);
        },
        error => {
          console.error("現在地取得エラー:", error);
          alert("現在地を取得できませんでした。");
        }
      );
    } else {
      alert("Geolocationに対応していません。");
    }
  </script>
</body>
</html>
